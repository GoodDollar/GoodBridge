import { ethers } from 'hardhat';
import { expect } from 'chai';

describe('TestRLPParser', function () {
  it('should return the correct block receiptsRoot for Celo', async function () {
    const rlpHeader =
      '0xf9025ba0da3ad238e953b53fbff4abf9aca0695fe1d184f7323a13f6dfaf301f86fa024e94a66e834933e2c51542e95477d71f5a0aaf7d4999a05ef9062b21491902565ecc4da5d11840ed39fee113098808bf12fdf48c9ac0f3a03810c781bd05b16d56cacbb3933c92cc337b1a0d69c80047225d4f0cd28ca690a0bb378148b985cbd491bea26a17b17d1cd55dcb4a6625a2f4c2f76b35eea27f0ebe1cec830a987a846438756fb8afd983010700846765746889676f312e31372e3133856c696e7578000000000000f88dc0c080b841e87a93c9a5871e405b8d4d63821c0ad490b49a656babce6c07eb4857f58662370c68e0385af96cfb397c75c1513bf7065a8cd89e686e3e804b0fc48d7a2dfa8500c3808080f8418e3fffffffffffffffffffefffffffb0797a8a3efe1aa3717445ab60433dc90070aec61b12306febe4595ceb86cdcb87a2d39e3c112d243906e63bbec87e550180';
    const chainId = 42220;
    const expectedRoot = '0xbb378148b985cbd491bea26a17b17d1cd55dcb4a6625a2f4c2f76b35eea27f0e';

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const root = await parser.testGetBlockReceiptsRoot(chainId, rlpHeader);
    expect(root).to.equal(expectedRoot);
  });

  it('should return the correct block receiptsRoot for Celo after fork', async function () {
    const rlpHeader =
      '0xf902b2a0b1fd6ed9f44c8d7db499c9756a2b6a5eb3441144bbda7462a4d94c6f203a9d67a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944b64995254836fa1d104a85df94e0401689e587aa0639ecb2b9601334f7037ebea9b6137780a1b29aabd53b003394e545a1eb29ddda07d882b510134c49281e5450abde5acc469e4c7ae749e1d6a00cc0586fcefa6eca081201822c9456e55c6f7c1e5920ce56b009728e789f624889161b021a85447d1b90100008040000040000000002400008000000000000000004000020004040020010000008000000000000001800000010408000000008000000000000000012000000008000810000000200140080008000000c000200c0008000000001200000002000000000000002000004044400088000000040000100000400100100008200000000000000080004000100000000008000040800000008800000000040000000200008000000000000008000002000020000810000000000000800000000400208004020000001000000000000020000000000000100280100010000000002000100220000000000000000200800000000000008000200000000000040000008084014a03038401e848008325773b846513f56fb8afd983010800846765746889676f312e31372e3133856c696e7578000000000000f88dc0c080b841a7cb060bda6354982dbc3e6149ef999f6c98834fc481aef5713f0fe133ac23c42fca718d1dcb50ece2b0e33e342261f74098f99864b6983d3cafbbb0a197235500c3808080f8418e3fffdff7ffffeffffdffffffffffb0d3bccb1c82b1553602a801ed9b2c9c6f4d44c043b4c09f183d78018901db7a175487b2e65564475985de61c4b013278080a0000000000000000000000000000000000000000000000000000000000000000088000000000000000085012a05f200';
    const chainId = 42220;
    const expectedRoot = '0x81201822c9456e55c6f7c1e5920ce56b009728e789f624889161b021a85447d1';

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const root = await parser.testGetBlockReceiptsRoot(chainId, rlpHeader);
    expect(root).to.equal(expectedRoot);
  });

  it('should return the correct block receiptsRoot for Alfajores L2', async function () {
    //block 37126751 on alfajores L2
    const rlpHeader =
      '0xf90246a051d546a85d8f487109739cdf3811c0389738d7811c4d16d39cbfab623722a945a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944200000000000000000000000000000000000011a0e3cd070f1caa02835c59a73ada44bb517ffe3c38121557721b307a51ac180d85a058f22adbaa99bb72f9d2bf41f13cd2b91a5105289571f495454f4f5487cc70bea023b0fae47f8c4675c4ee381fdcc9bda4258eb69956927724634e32d79b1e2d40bf8401c9c3808301769a846799071780a0e711f021810eb96b799f330fd2717d0278355426773ea799a36e3277c7cc2c408800000000000000008505d21dba00a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0854e444d34b7f085b0c310d245179183c10b18bfce91d4905bf9c7d33e29da47';
    const chainId = 42220;
    const expectedRoot = '0x23b0fae47f8c4675c4ee381fdcc9bda4258eb69956927724634e32d79b1e2d40';

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const root = await parser.testGetBlockReceiptsRoot(chainId, rlpHeader);
    expect(root).to.equal(expectedRoot);
  });

  it('should return the correct block number for Alfajores L2', async function () {
    //block 37126751 on alfajores L2
    const rlpHeader =
      '0xf90246a051d546a85d8f487109739cdf3811c0389738d7811c4d16d39cbfab623722a945a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944200000000000000000000000000000000000011a0e3cd070f1caa02835c59a73ada44bb517ffe3c38121557721b307a51ac180d85a058f22adbaa99bb72f9d2bf41f13cd2b91a5105289571f495454f4f5487cc70bea023b0fae47f8c4675c4ee381fdcc9bda4258eb69956927724634e32d79b1e2d40bf8401c9c3808301769a846799071780a0e711f021810eb96b799f330fd2717d0278355426773ea799a36e3277c7cc2c408800000000000000008505d21dba00a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0854e444d34b7f085b0c310d245179183c10b18bfce91d4905bf9c7d33e29da47';
    const chainId = 42220;
    const expectedRoot = '0x23b0fae47f8c4675c4ee381fdcc9bda4258eb69956927724634e32d79b1e2d40';

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const root = await parser.testGetBlockNumber(chainId, rlpHeader);
    expect(root).to.equal(37126751);
  });

  it('should return the correct block parent and number for Alfajores L2', async function () {
    //block 37126751 on alfajores L2
    const rlpHeader =
      '0xf90246a051d546a85d8f487109739cdf3811c0389738d7811c4d16d39cbfab623722a945a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944200000000000000000000000000000000000011a0e3cd070f1caa02835c59a73ada44bb517ffe3c38121557721b307a51ac180d85a058f22adbaa99bb72f9d2bf41f13cd2b91a5105289571f495454f4f5487cc70bea023b0fae47f8c4675c4ee381fdcc9bda4258eb69956927724634e32d79b1e2d40bf8401c9c3808301769a846799071780a0e711f021810eb96b799f330fd2717d0278355426773ea799a36e3277c7cc2c408800000000000000008505d21dba00a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0854e444d34b7f085b0c310d245179183c10b18bfce91d4905bf9c7d33e29da47';
    const chainId = 42220;
    const expectedParentHash = '0x51d546a85d8f487109739cdf3811c0389738d7811c4d16d39cbfab623722a945';

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const [blockNumber, parentHash] = await parser.testGetBlockParentAndNumber(chainId, rlpHeader);
    expect(blockNumber).to.equal(37126751);
    expect(parentHash).to.equal(expectedParentHash);
  });

  it('should return the correct block number for Celo', async function () {
    const rlpHeader =
      '0xf9025ba0da3ad238e953b53fbff4abf9aca0695fe1d184f7323a13f6dfaf301f86fa024e94a66e834933e2c51542e95477d71f5a0aaf7d4999a05ef9062b21491902565ecc4da5d11840ed39fee113098808bf12fdf48c9ac0f3a03810c781bd05b16d56cacbb3933c92cc337b1a0d69c80047225d4f0cd28ca690a0bb378148b985cbd491bea26a17b17d1cd55dcb4a6625a2f4c2f76b35eea27f0ebe1cec830a987a846438756fb8afd983010700846765746889676f312e31372e3133856c696e7578000000000000f88dc0c080b841e87a93c9a5871e405b8d4d63821c0ad490b49a656babce6c07eb4857f58662370c68e0385af96cfb397c75c1513bf7065a8cd89e686e3e804b0fc48d7a2dfa8500c3808080f8418e3fffffffffffffffffffefffffffb0797a8a3efe1aa3717445ab60433dc90070aec61b12306febe4595ceb86cdcb87a2d39e3c112d243906e63bbec87e550180';
    const chainId = 42220;
    const expectedBlockNumber = Number(0x11e1cec);

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const blockNumber = await parser.testGetBlockNumber(chainId, rlpHeader);
    expect(blockNumber).to.equal(expectedBlockNumber);
  });

  it('should return the correct block header fields for Celo', async function () {
    const rlpHeader =
      '0xf9025ba0da3ad238e953b53fbff4abf9aca0695fe1d184f7323a13f6dfaf301f86fa024e94a66e834933e2c51542e95477d71f5a0aaf7d4999a05ef9062b21491902565ecc4da5d11840ed39fee113098808bf12fdf48c9ac0f3a03810c781bd05b16d56cacbb3933c92cc337b1a0d69c80047225d4f0cd28ca690a0bb378148b985cbd491bea26a17b17d1cd55dcb4a6625a2f4c2f76b35eea27f0ebe1cec830a987a846438756fb8afd983010700846765746889676f312e31372e3133856c696e7578000000000000f88dc0c080b841e87a93c9a5871e405b8d4d63821c0ad490b49a656babce6c07eb4857f58662370c68e0385af96cfb397c75c1513bf7065a8cd89e686e3e804b0fc48d7a2dfa8500c3808080f8418e3fffffffffffffffffffefffffffb0797a8a3efe1aa3717445ab60433dc90070aec61b12306febe4595ceb86cdcb87a2d39e3c112d243906e63bbec87e550180';
    const expectedBlockFields = 10;

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const blockFields = await parser.testGetBlockHeaderNumFields(rlpHeader);
    expect(blockFields).to.equal(expectedBlockFields);
  });

  it('should return the correct block header fields for Celo 1.8 hardfork', async function () {
    const rlpHeader =
      '0xf902b2a0b1fd6ed9f44c8d7db499c9756a2b6a5eb3441144bbda7462a4d94c6f203a9d67a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944b64995254836fa1d104a85df94e0401689e587aa0639ecb2b9601334f7037ebea9b6137780a1b29aabd53b003394e545a1eb29ddda07d882b510134c49281e5450abde5acc469e4c7ae749e1d6a00cc0586fcefa6eca081201822c9456e55c6f7c1e5920ce56b009728e789f624889161b021a85447d1b90100008040000040000000002400008000000000000000004000020004040020010000008000000000000001800000010408000000008000000000000000012000000008000810000000200140080008000000c000200c0008000000001200000002000000000000002000004044400088000000040000100000400100100008200000000000000080004000100000000008000040800000008800000000040000000200008000000000000008000002000020000810000000000000800000000400208004020000001000000000000020000000000000100280100010000000002000100220000000000000000200800000000000008000200000000000040000008084014a03038401e848008325773b846513f56fb8afd983010800846765746889676f312e31372e3133856c696e7578000000000000f88dc0c080b841a7cb060bda6354982dbc3e6149ef999f6c98834fc481aef5713f0fe133ac23c42fca718d1dcb50ece2b0e33e342261f74098f99864b6983d3cafbbb0a197235500c3808080f8418e3fffdff7ffffeffffdffffffffffb0d3bccb1c82b1553602a801ed9b2c9c6f4d44c043b4c09f183d78018901db7a175487b2e65564475985de61c4b013278080a0000000000000000000000000000000000000000000000000000000000000000088000000000000000085012a05f200';
    const expectedBlockFields = 16;

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const blockFields = await parser.testGetBlockHeaderNumFields(rlpHeader);
    expect(blockFields).to.equal(expectedBlockFields);
  });

  it('should return the correct block number for Celo after hardfork', async function () {
    const rlpHeader =
      '0xf902b2a0b1fd6ed9f44c8d7db499c9756a2b6a5eb3441144bbda7462a4d94c6f203a9d67a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944b64995254836fa1d104a85df94e0401689e587aa0639ecb2b9601334f7037ebea9b6137780a1b29aabd53b003394e545a1eb29ddda07d882b510134c49281e5450abde5acc469e4c7ae749e1d6a00cc0586fcefa6eca081201822c9456e55c6f7c1e5920ce56b009728e789f624889161b021a85447d1b90100008040000040000000002400008000000000000000004000020004040020010000008000000000000001800000010408000000008000000000000000012000000008000810000000200140080008000000c000200c0008000000001200000002000000000000002000004044400088000000040000100000400100100008200000000000000080004000100000000008000040800000008800000000040000000200008000000000000008000002000020000810000000000000800000000400208004020000001000000000000020000000000000100280100010000000002000100220000000000000000200800000000000008000200000000000040000008084014a03038401e848008325773b846513f56fb8afd983010800846765746889676f312e31372e3133856c696e7578000000000000f88dc0c080b841a7cb060bda6354982dbc3e6149ef999f6c98834fc481aef5713f0fe133ac23c42fca718d1dcb50ece2b0e33e342261f74098f99864b6983d3cafbbb0a197235500c3808080f8418e3fffdff7ffffeffffdffffffffffb0d3bccb1c82b1553602a801ed9b2c9c6f4d44c043b4c09f183d78018901db7a175487b2e65564475985de61c4b013278080a0000000000000000000000000000000000000000000000000000000000000000088000000000000000085012a05f200';
    const chainId = 42220;
    const expectedBlockNumber = Number(21627651);

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const blockNumber = await parser.testGetBlockNumber(chainId, rlpHeader);
    expect(blockNumber).to.equal(expectedBlockNumber);
  });

  it('should return the correct block parent and number for Celo', async function () {
    const rlpHeader =
      '0xf9025ba0da3ad238e953b53fbff4abf9aca0695fe1d184f7323a13f6dfaf301f86fa024e94a66e834933e2c51542e95477d71f5a0aaf7d4999a05ef9062b21491902565ecc4da5d11840ed39fee113098808bf12fdf48c9ac0f3a03810c781bd05b16d56cacbb3933c92cc337b1a0d69c80047225d4f0cd28ca690a0bb378148b985cbd491bea26a17b17d1cd55dcb4a6625a2f4c2f76b35eea27f0ebe1cec830a987a846438756fb8afd983010700846765746889676f312e31372e3133856c696e7578000000000000f88dc0c080b841e87a93c9a5871e405b8d4d63821c0ad490b49a656babce6c07eb4857f58662370c68e0385af96cfb397c75c1513bf7065a8cd89e686e3e804b0fc48d7a2dfa8500c3808080f8418e3fffffffffffffffffffefffffffb0797a8a3efe1aa3717445ab60433dc90070aec61b12306febe4595ceb86cdcb87a2d39e3c112d243906e63bbec87e550180';
    const chainId = 42220;
    const expectedBlockNumber = Number(0x11e1cec);
    const expectedParentHash = '0xda3ad238e953b53fbff4abf9aca0695fe1d184f7323a13f6dfaf301f86fa024e';

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const [blockNumber, parentHash] = await parser.testGetBlockParentAndNumber(chainId, rlpHeader);
    expect(blockNumber).to.equal(expectedBlockNumber);
    expect(parentHash).to.equal(expectedParentHash);
  });

  it('should return the correct block number for Celo L2', async function () {
    //block 31442929 on Celo L2
    const rlpHeader =
      '0xf90246a08cb68faedd69c26601de70a16b3d6fb161a550218996f64ad5949453652c8327a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944200000000000000000000000000000000000011a097f4f8630a99fbdac98a6e4f255612eedec196675f1567c805f591123d78785da069fcb959ac403f8762fee131748ad8df8c64efbd953b8f27a83357b0accbaa32a059386f7352b8779eafd28097fc29b95c9946653e7c5363e95d7197fff8b0f1edb9010000800210000400000000602000080000000000220000000000000000400000100000000000000000000000002040000b0000000000000000000000000000000002000000020020100000000800000000000000000c000000000400400001000044000000000000000000400000008008000000000080000040000010000080000000010000802000400082000000000800400000000000004000000000080000010000800000000008000000400000010020000004000008000000022800200000000002000000000000008000000000000000000000001000001a00000000000000100000000008000000000000402000000000000000000000000000000804808401dfc7f18401c9c380830ff8358467e9504780a0de0e5cb48aa8b38f52dd5db12ba3677cea78e8f050b88fbbbc2de6a1e8d7c46d8800000000000000008505d21dba00a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0505a52a04d5a51ccbffded8179d98942decb60c216d3fa6564c6ccee9ad3d79e';
    const chainId = 42220;
    const expectedRoot = '0x23b0fae47f8c4675c4ee381fdcc9bda4258eb69956927724634e32d79b1e2d40';

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const root = await parser.testGetBlockNumber(chainId, rlpHeader);
    expect(root).to.equal(31442929);
  });

  it('should return the correct block parent and number for Celo L2', async function () {
    //block 31442929 on Celo L2
    const rlpHeader =
      '0xf90246a08cb68faedd69c26601de70a16b3d6fb161a550218996f64ad5949453652c8327a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944200000000000000000000000000000000000011a097f4f8630a99fbdac98a6e4f255612eedec196675f1567c805f591123d78785da069fcb959ac403f8762fee131748ad8df8c64efbd953b8f27a83357b0accbaa32a059386f7352b8779eafd28097fc29b95c9946653e7c5363e95d7197fff8b0f1edb9010000800210000400000000602000080000000000220000000000000000400000100000000000000000000000002040000b0000000000000000000000000000000002000000020020100000000800000000000000000c000000000400400001000044000000000000000000400000008008000000000080000040000010000080000000010000802000400082000000000800400000000000004000000000080000010000800000000008000000400000010020000004000008000000022800200000000002000000000000008000000000000000000000001000001a00000000000000100000000008000000000000402000000000000000000000000000000804808401dfc7f18401c9c380830ff8358467e9504780a0de0e5cb48aa8b38f52dd5db12ba3677cea78e8f050b88fbbbc2de6a1e8d7c46d8800000000000000008505d21dba00a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0505a52a04d5a51ccbffded8179d98942decb60c216d3fa6564c6ccee9ad3d79e';
    const chainId = 42220;
    const expectedParentHash = '0x8cb68faedd69c26601de70a16b3d6fb161a550218996f64ad5949453652c8327';

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const [blockNumber, parentHash] = await parser.testGetBlockParentAndNumber(chainId, rlpHeader);
    expect(blockNumber).to.equal(31442929);
    expect(parentHash).to.equal(expectedParentHash);
  });

  it('should return the correct block header fields for Celo L2 hardfork', async function () {
    const rlpHeader =
      '0xf90246a08cb68faedd69c26601de70a16b3d6fb161a550218996f64ad5949453652c8327a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347944200000000000000000000000000000000000011a097f4f8630a99fbdac98a6e4f255612eedec196675f1567c805f591123d78785da069fcb959ac403f8762fee131748ad8df8c64efbd953b8f27a83357b0accbaa32a059386f7352b8779eafd28097fc29b95c9946653e7c5363e95d7197fff8b0f1edb9010000800210000400000000602000080000000000220000000000000000400000100000000000000000000000002040000b0000000000000000000000000000000002000000020020100000000800000000000000000c000000000400400001000044000000000000000000400000008008000000000080000040000010000080000000010000802000400082000000000800400000000000004000000000080000010000800000000008000000400000010020000004000008000000022800200000000002000000000000008000000000000000000000001000001a00000000000000100000000008000000000000402000000000000000000000000000000804808401dfc7f18401c9c380830ff8358467e9504780a0de0e5cb48aa8b38f52dd5db12ba3677cea78e8f050b88fbbbc2de6a1e8d7c46d8800000000000000008505d21dba00a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4218080a0505a52a04d5a51ccbffded8179d98942decb60c216d3fa6564c6ccee9ad3d79e';
    const expectedBlockFields = 20;

    const RLPParser = await ethers.getContractFactory('TestRLPParser');
    const parser = await RLPParser.deploy();

    const blockFields = await parser.testGetBlockHeaderNumFields(rlpHeader);
    expect(blockFields).to.equal(expectedBlockFields);
  });
});
